name: Verifable build
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  BUILD_CONFIGURATION: Release

jobs:
  build-and-publish:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
            trim: true
            publishArgs: '.\src\Verifable\Verifable.csproj --framework net8.0-windows10.0.19041.0 -p:EnableCodeSigning=false -p:RuntimeIdentifierOverride=win10-x64'
          - platform: android
            os: windows-latest
            trim: true
            publishArgs: './src/Verifable/Verifable.csproj --framework net8.0-android -p:EnableCodeSigning=false -restoreProperty:RestoreLockedMode=true'
          - platform: ios
            os: macos-latest
            trim: true
            publishArgs: './src/Verifable/Verifable.csproj --framework net8.0-ios -p:UseMauiAppBuilder=true -p:PublishTrimmed=false -p:EnableCodeSigning=false -restoreProperty:RestoreLockedMode=true'
          - platform: maccatalyst
            os: macos-latest
            trim: true
            publishArgs: './src/Verifable/Verifable.csproj --framework net8.0-maccatalyst -p:UseMauiAppBuilder=true -p:PublishTrimmed=false -p:EnableCodeSigning=false -restoreProperty:RestoreLockedMode=true'
    runs-on: ${{ matrix.os }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            aka.ms:443
            api.github.com:443
            api.nuget.org:443
            dashboard.stryker-mutator.io:443
            dotnetcli.azureedge.net:443
            github.com:443
            nuget.pkg.github.com:443
            api.clearlydefined.io:443
            cacerts.digicert.com:80
            ts-crl.ws.symantec.com:80
            crl3.digicert.com:80
            crl4.digicert.com:80
            s.symcb.com:80
            ocsp.digicert.com:80

      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          fetch-depth: 2

      - name: Cache Nuget packages '${{ matrix.platform }}'
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Setup .NET SDK using global.json
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3
        with:
          global-json-file: global.json

      - name: Install MAUI Workload
        run: dotnet workload install maui --ignore-failed-sources

      - name: Install dependencies
        run: dotnet restore --locked-mode

      - name: Restore local tools
        run: dotnet tool restore

      - name: Add Problem Matcher for dotnet-format
        uses: xt0rted/dotnet-format-problem-matcher@b90c4f18e3daa4f8fd266e41eba4f351b2e00b75

      # Optional: Uncomment to run dotnet format check
      # - name: Run dotnet format
      #   run: dotnet format --check

      - name: Create directory for SBOM
        run: mkdir -p "${{ github.workspace }}/${{ matrix.platform }}/sbom/"

      - name: Run BOM analysis
        run: dotnet tool run sbom-tool generate -DeleteManifestDirIfPresent true -BuildDropPath "${{ github.workspace }}/${{ matrix.platform }}/sbom/" -FetchLicenseInformation true -EnablePackageMetadataParsing true -BuildComponentPath . -PackageName "Verifable" -PackageSupplier "Lumoin" -NamespaceUriBase "https://lumoin.com/verifable" -PackageVersion 1.0.0 -Verbosity Verbose

      - name: Set arguments for MacOS
        shell: bash
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "BUILD_ARGS=--binaryLogger --graphBuild -isolate:MessageUponIsolationViolation --configuration ${{ env.BUILD_CONFIGURATION }} -property:ContinuousIntegrationBuild=true" >> $GITHUB_ENV
          echo "PUBLISH_ARGS=--binaryLogger --graphBuild -isolate:MessageUponIsolationViolation ${{ matrix.publishArgs }} -p:PublishTrimmed=false" >> $GITHUB_ENV

      - name: Set arguments for other platforms
        if: ${{ !startsWith(matrix.os, 'macos') }}
        shell: bash
        run: |
          echo "BUILD_ARGS=--binaryLogger --graphBuild -isolate:MessageUponIsolationViolation --configuration ${{ env.BUILD_CONFIGURATION }} -property:ContinuousIntegrationBuild=true" >> $GITHUB_ENV
          echo "PUBLISH_ARGS=--binaryLogger --graphBuild -isolate:MessageUponIsolationViolation ${{ matrix.publishArgs }}" >> $GITHUB_ENV


      - name: Build Verifable
        shell: bash
        run: dotnet build ${{ env.BUILD_ARGS }}

      - name: Test
        shell: bash
        run: dotnet test --collect:"XPlat Code Coverage" --verbosity normal --no-restore --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx -property:DeterministicSourcePaths=true -property:IncludeTestAssembly=true --results-directory '${{ github.workspace }}/reports/coverage/'
        timeout-minutes: 5

      - name: Publish Verifiable
        shell: bash
        run: dotnet publish ${{ env.PUBLISH_ARGS }}

      - name: Upload published Verifiable application
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        with:
          name: ${{ matrix.platform }}-artifact
          path: ./publish/${{ matrix.platform }}
